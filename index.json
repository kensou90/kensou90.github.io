[{"categories":["Demo"],"content":"代码折叠 public static void main(String[] args) { System.out.println(\"Hello World!\"); /// } grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意 一个 注意 横幅 摘要 一个 摘要 横幅 信息 一个 信息 横幅 技巧 一个 技巧 横幅 成功 一个 成功 横幅 问题 一个 问题 横幅 警告 一个 警告 横幅 失败 一个 失败 横幅 危险 一个 危险 横幅 Bug 一个 Bug 横幅 示例 一个 示例 横幅 引用 一个 引用 横幅 ","date":"2022-12-21","objectID":"/posts/practice_markdown/:0:1","tags":["admonition"],"title":"Practice_markdown","uri":"/posts/practice_markdown/"},{"categories":["并发编程"],"content":"一、构造方法 ","date":"2022-12-18","objectID":"/posts/thread/:1:0","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"1、ThreadGroup group 所属线程组，默认值是Thread.currentThread().getParentGroup()，这句代码是在创建线程的时候执行，所以默认的parentGroup是父线程的线程组 ","date":"2022-12-18","objectID":"/posts/thread/:1:1","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"2、Runnable target 这个不用多介绍，其实是策略模式的一种实现，将线程的具体执行单元抽取出来，以策略的方式执行。如果不传，就必须重写Thread.run()方法 ","date":"2022-12-18","objectID":"/posts/thread/:1:2","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"3、String name 线程名称，如果不传，默认值是Thread-0、Thread-1、Thread-2 … Thread-n。线程名称不能重复，否则会抛异常 ","date":"2022-12-18","objectID":"/posts/thread/:1:3","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"4、long stackSize 线程的栈内存大小，每个平台都不一样，在某些平台中，这个参数可能不管用。默认值是？？？ ","date":"2022-12-18","objectID":"/posts/thread/:1:4","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"二、API setDeamon(boolean) 设置守护线程。true守护线程，parent线程结束后，自动结束子线程，false非守护线程，parent线程结束后，不自动结束子线程。默认非守护线程 join 让parent线程等待我执行完毕，在我执行完毕之前，父线程将一直等待我。也可以使用join(mills)指定等待时间，如果超时，父线程会被自动唤醒 sleep 让当前线程休眠一段时间，到时间自动唤醒，休眠期间当前线程不会放弃任何锁，也不会放弃CPU的执行权 interrupt Object.wait, Thread.sleep, Thread.join会让阻塞线程执行，这时使用interrupt会打断线程的阻塞，线程会收到InterruptedException异常 interrupted 判断当前线程是否被中断，静态方法 isInterrupted 判断当前线程是否被中断，成员方法 isAlive Tests if this thread is alive. A thread is alive if it has been started and has not yet died. Thread.holdsLock(obj) 静态方法 判断线程是否持有obj锁 setUncaughtExceptionHandler 设置线程异常监听器 enumerate 将当前线程组和所有子线程组中存活的线程查找出来，并存放在入参中 yield 暂时放弃CPU执行权，然后所有其他线程根据优先级争取CPU执行权 Thread.activeAccount() 静态方法 评估所在线程组和所有子线程组存活的线程数量，是一个不准确的数量，此方法是用来debug或者监控系统用的 ","date":"2022-12-18","objectID":"/posts/thread/:2:0","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"三、线程状态 状态 描述 时机 NEW 刚刚创建出来，还没有start new Thread() RUNNABLE 已经start，可执行状态。可能在执行，也可能在等待CPU资源调度 thread.start() BLOCKED 等待MONITOR，进入或重新进入synchronized method/block MONITOR.wait() -\u003e MONITOR.notify() WAITING 等待MONITOR.notify，或者等待被join的线程结束 MONITOR.wait()、Thread.join() TIMED_WAITING 等待timeout结束 MONITOR.wait(timeout)、Thread.sleep(timeout)、thread.join(timeout) TERMINATED 线程执行结束 执行完毕（正常退出和异常退出） ","date":"2022-12-18","objectID":"/posts/thread/:3:0","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"四、锁 ","date":"2022-12-18","objectID":"/posts/thread/:4:0","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"1、synchronized 同步方法和静态同步方法的MONITOR都是谁？ public class SynchronizedTest { /** * 这个案例能证明: * 非静态同步方法的MONITOR是当前对象 * 静态同步方法的MONITOR是当前Class */ public static void main(String[] args) { NonStaticSync obj = new NonStaticSync(); // 这两个线程不能同时打印, 说明其中一个在等待另一个释放锁, 所以两个锁一定是相同的 // 证明非静态同步方法的MONITOR是当前对象 new Thread(obj::test1).start(); new Thread(obj::test2).start(); // 这两个线程不能同时打印, 说明其中一个在等待另一个释放锁, 所以两个锁一定是相同的 // 证明静态同步方法的MONITOR是当前Class new Thread(StaticSync::test1).start(); new Thread(StaticSync::test2).start(); } static class NonStaticSync { public synchronized void test1() { System.out.println(\"NonStaticSync.test1\"); try { Thread.sleep(5_000); } catch (InterruptedException e) { e.printStackTrace(); } } private static final Object MONITOR = new Object(); public void test2() { synchronized (this) { // synchronized (MONITOR) { System.out.println(\"NonStaticSync.test2\"); try { Thread.sleep(5_000); } catch (InterruptedException e) { e.printStackTrace(); } } } } static class StaticSync { public static synchronized void test1() { System.out.println(\"StaticSync.test1\"); try { Thread.sleep(5_000); } catch (InterruptedException e) { e.printStackTrace(); } } public static void test2() { synchronized (StaticSync.class) { System.out.println(\"StaticSync.test2\"); try { Thread.sleep(5_000); } catch (InterruptedException e) { e.printStackTrace(); } } } } } ","date":"2022-12-18","objectID":"/posts/thread/:4:1","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"2、死锁是怎么发生的，怎么排查死锁，怎么避免死锁 同步代码多层级调用，避免同步代码多层级调用，就可以避免死锁 jstack pid可以查看死锁 jconsole 也可以检查死锁 static synchronized method ","date":"2022-12-18","objectID":"/posts/thread/:4:2","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"五、如何停止线程 ","date":"2022-12-18","objectID":"/posts/thread/:5:0","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"1、优雅的停止线程 public class StopThreadGraceful { public static void main(String[] args) throws InterruptedException { Worker worker = new Worker(); worker.start(); Thread.sleep(5_000); worker.interrupt(); } private static class Worker extends Thread { @Override public void run() { while (true) { if (isInterrupted()) { break; } doWork(); } // 释放资源等操作 } // @Override // public void run() { // while (true) { // doWork(); // try { // Thread.sleep(1000); // } catch (InterruptedException e) { // break; // } // } // // 释放资源等操作 // } private void doWork() { System.out.println(\"working...\"); } } } ","date":"2022-12-18","objectID":"/posts/thread/:5:1","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"2、强制停止线程 public class StopThreadForce { /** * 强制停止线程的思路是: 守护线程 */ public static void main(String[] args) throws InterruptedException { ThreadService threadService = ThreadService.newInstance(); threadService.submit(() -\u003e { while (true) { System.out.println(\"------\"); } }); Thread.sleep(5_000); threadService.shutdown(); } public static class ThreadService { private Thread hostThread; private ThreadService() {} public static ThreadService newInstance() { return new ThreadService(); } public void submit(Runnable runnable) { hostThread = new Thread(() -\u003e { Thread targetThread = new Thread(runnable); targetThread.setDaemon(true); targetThread.start(); try { targetThread.join(); } catch (InterruptedException e) { e.printStackTrace(); } }); hostThread.start(); } public void shutdown() { hostThread.interrupt(); } } } ","date":"2022-12-18","objectID":"/posts/thread/:5:2","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"六、线程间通信 两种方式：共享内存 or 消息传递 1、共享内存 2、消息传递 Object.notify() \u0026 Object.wait() ","date":"2022-12-18","objectID":"/posts/thread/:6:0","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"七、Thread.sleep和Object.wait的区别是什么 1、sleep时Thread的方法，而wait是Object的方法 2、sleep不会放弃CPU执行权，但是wait会放弃CPU执行权 3、sleep不需要MONITOR，wait必须在同步代码块中执行，MONITOR.wait() 4、sleep不需要唤醒，wait则需要唤醒 ","date":"2022-12-18","objectID":"/posts/thread/:7:0","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["并发编程"],"content":"八、手写线程池 public class SimpleThreadPool { private static final int DEFAULT_SIZE = 10; private static final String THREAD_NAME_PREFIX = \"simple-thread-pool\"; private static final String THREAD_GROUP_NAME = THREAD_NAME_PREFIX; private static int seq = 0; private LinkedList\u003cThread\u003e threads; private final LinkedList\u003cRunnable\u003e tasks = new LinkedList\u003c\u003e();; private int size; private ThreadGroup group; public SimpleThreadPool() { this(DEFAULT_SIZE); } public SimpleThreadPool(int size) { this.size = size; if (size \u003c= 0) { this.size = DEFAULT_SIZE; } init(); } public void submit(Runnable task) { synchronized (tasks) { tasks.addFirst(task); tasks.notifyAll(); } } private void init() { group = new ThreadGroup(THREAD_GROUP_NAME); threads = new LinkedList\u003c\u003e(); for (int i = 0; i \u003c size; i++) { Thread thread = createThread(); threads.addFirst(thread); } } private Thread createThread() { Thread thread = new Thread(group, () -\u003e { while (true) { Runnable runnable; synchronized (tasks) { while (tasks.isEmpty()) { try { tasks.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } runnable = tasks.removeLast(); } if (runnable != null) { runnable.run(); } } }, THREAD_NAME_PREFIX + \"-\" + ++seq); thread.start(); return thread; } public static void main(String[] args) { SimpleThreadPool pool = new SimpleThreadPool(3); Random random = new Random(); while (true) { int count = random.nextInt(20); System.out.println(\"count = \" + count); IntStream.range(0, count).forEach(i -\u003e { pool.submit(() -\u003e { System.out.println(Thread.currentThread()); try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } }); }); try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); } } } } ","date":"2022-12-18","objectID":"/posts/thread/:8:0","tags":["Thread"],"title":"Thread","uri":"/posts/thread/"},{"categories":["documentation"],"content":"echarts shortcode 使用 ECharts 库提供数据可视化的功能。","date":"2022-07-20","objectID":"/posts/echart/","tags":["shortcodes"],"title":"扩展 Shortcode - echarts","uri":"/posts/echart/"},{"categories":["documentation"],"content":"echarts shortcode 使用 ECharts 库提供数据可视化的功能. ECharts 是一个帮助你生成交互式数据可视化的库. ECharts 提供了常规的 折线图, 柱状图, 散点图, 饼图, K线图, 用于统计的 盒形图, 用于地理数据可视化的 地图, 热力图, 线图, 用于关系数据可视化的 关系图, treemap, 旭日图, 多维数据可视化的 平行坐标, 还有用于 BI 的 漏斗图, 仪表盘, 并且支持图与图之间的混搭. 只需在 echarts shortcode 中以 JSON/YAML/TOML格式插入 ECharts 选项即可. 一个 JSON 格式的 echarts 示例: {{\u003c echarts \u003e}} { \"title\": { \"text\": \"折线统计图\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"保存为图片\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"邮件营销\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"联盟广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"视频广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"直接访问\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"搜索引擎\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} 一个 YAML 格式的 echarts 示例: {{\u003c echarts \u003e}} title: text: 折线统计图 top: 2% left: center tooltip: trigger: axis legend: data: - 邮件营销 - 联盟广告 - 视频广告 - 直接访问 - 搜索引擎 top: 10% grid: left: 5% right: 5% bottom: 5% top: 20% containLabel: true toolbox: feature: saveAsImage: title: 保存为图片 xAxis: type: category boundaryGap: false data: - 周一 - 周二 - 周三 - 周四 - 周五 - 周六 - 周日 yAxis: type: value series: - name: 邮件营销 type: line stack: 总量 data: - 120 - 132 - 101 - 134 - 90 - 230 - 210 - name: 联盟广告 type: line stack: 总量 data: - 220 - 182 - 191 - 234 - 290 - 330 - 310 - name: 视频广告 type: line stack: 总量 data: - 150 - 232 - 201 - 154 - 190 - 330 - 410 - name: 直接访问 type: line stack: 总量 data: - 320 - 332 - 301 - 334 - 390 - 330 - 320 - name: 搜索引擎 type: line stack: 总量 data: - 820 - 932 - 901 - 934 - 1290 - 1330 - 1320 {{\u003c /echarts \u003e}} 一个 TOML 格式的 echarts 示例: {{\u003c echarts \u003e}} [title] text = \"折线统计图\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"保存为图片\" [xAxis] type = \"category\" boundaryGap = false data = [ \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\" ] [yAxis] type = \"value\" [[series]] name = \"邮件营销\" type = \"line\" stack = \"总量\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"联盟广告\" type = \"line\" stack = \"总量\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"视频广告\" type = \"line\" stack = \"总量\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"直接访问\" type = \"line\" stack = \"总量\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \"搜索引擎\" type = \"line\" stack = \"总量\" data = [ 820.0, 932.0, 901.0, 934.0, 1290.0, 1330.0, 1320.0 ] {{\u003c /echarts \u003e}} 呈现的输出效果如下: echarts shortcode 还有以下命名参数: width [可选] (第一个位置参数) 数据可视化的宽度, 默认值是 100%. height [可选] (第二个位置参数) 数据可视化的高度, 默认值是 30rem. ","date":"2022-07-20","objectID":"/posts/echart/:0:0","tags":["shortcodes"],"title":"扩展 Shortcode - echarts","uri":"/posts/echart/"},{"categories":["Markdown语法"],"content":"这篇文章展示了基本的 Markdown 语法和格式。","date":"2021-12-18","objectID":"/posts/markdown/","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":" 注意 这篇文章借鉴了一篇很棒的 来自 Grav 的文章。 如果你想了解 FixIt 主题的扩展 Markdown 语法，请阅读 扩展 Markdown 语法页面。 事实上，编写 Web 内容很麻烦。[WYSIWYG]^(所见即所得) 编辑器帮助减轻了这一任务。但通常会导致代码太糟，或更糟糕的是，网页也会很丑。 没有通常伴随的所有复杂和丑陋的问题，Markdown 是一种更好的生成 HTML 内容的方式。 一些主要好处是： Markdown 简单易学，几乎没有多余的字符，因此编写内容也更快。 用 Markdown 书写时出错的机会更少。 可以产生有效的 XHTML 输出。 将内容和视觉显示保持分开，这样就不会打乱网站的外观。 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容。 Markdown 使用起来很有趣！ John Gruber, Markdown 的作者如是说： Markdown 格式的首要设计目标是更具可读性。　最初的想法是 Markdown 格式的文档应当以纯文本形式发布， 而不会看起来像被标签或格式说明所标记。 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响， 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式。 – John Gruber 话不多说，我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式！ 技巧 :(fa-regular fa-bookmark fa-fw): 将此页保存为书签，以备将来参考！ ","date":"2021-12-18","objectID":"/posts/markdown/:0:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样： \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID 要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中： ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样： \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e ","date":"2021-12-18","objectID":"/posts/markdown/:1:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释： ","date":"2021-12-18","objectID":"/posts/markdown/:2:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的。 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签： ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下： ","date":"2021-12-18","objectID":"/posts/markdown/:3:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"4 段落 按照纯文本的方式书写段落，纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹。 如下段落： Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样： \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2021-12-18","objectID":"/posts/markdown/:4:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 （带有一个类）, 则可以简单地像这样使用： Markdown 格式的段落。 \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落。 ","date":"2021-12-18","objectID":"/posts/markdown/:5:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"6 强调 ","date":"2021-12-18","objectID":"/posts/markdown/:6:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"加粗 用于强调带有较粗字体的文本片段。 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样： \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"2021-12-18","objectID":"/posts/markdown/:6:1","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"斜体 用于强调带有斜体的文本片段。 以下文本片段被 渲染为斜体。 *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样： \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"2021-12-18","objectID":"/posts/markdown/:6:2","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"删除线 按照 [GFM]^(GitHub flavored Markdown) 你可以使用删除线。 ~~这段文本带有删除线。~~ 呈现的输出效果如下： 这段文本带有删除线。 输出的 HTML 看起来像这样： \u003cdel\u003e这段文本带有删除线。\u003c/del\u003e ","date":"2021-12-18","objectID":"/posts/markdown/:6:3","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"组合 加粗，斜体，和删除线可以 组合使用。 ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗，斜体和删除线***~~ 呈现的输出效果如下： 加粗和斜体 删除线和加粗 删除线和斜体 加粗，斜体和删除线 输出的 HTML 看起来像这样： \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗，斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2021-12-18","objectID":"/posts/markdown/:6:4","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"7 引用 用于在文档中引用其他来源的内容块。 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下： Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样： \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套： \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下： Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2021-12-18","objectID":"/posts/markdown/:7:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"8 列表 ","date":"2021-12-18","objectID":"/posts/markdown/:8:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"无序列表 一系列项的列表，其中项的顺序没有明显关系。 你可以使用以下任何符号来表示无序列表中的项： * 一项内容 - 一项内容 + 一项内容 例如： * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下： Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样： \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2021-12-18","objectID":"/posts/markdown/:8:1","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"有序列表 一系列项的列表，其中项的顺序确实很重要。 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下： Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样： \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧 如果你对每一项使用 1., Markdown 将自动为每一项编号。例如： 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下： Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2021-12-18","objectID":"/posts/markdown/:8:2","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"任务列表 任务列表使你可以创建带有复选框的列表。 要创建任务列表，请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ])，要选择一个复选框，请在方括号之间添加 x ([x])。 - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下： Write the press release Update the website Contact the media ","date":"2021-12-18","objectID":"/posts/markdown/:8:3","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"9 代码 ","date":"2021-12-18","objectID":"/posts/markdown/:9:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"行内代码 用 ` 包装行内代码段。 在这个例子中，`\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**。 呈现的输出效果如下： 在这个例子中，\u003csection\u003e\u003c/section\u003e 会被包裹成 代码。 输出的 HTML 看起来像这样： \u003cp\u003e 在这个例子中，\u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e。 \u003c/p\u003e ","date":"2021-12-18","objectID":"/posts/markdown/:9:1","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"缩进代码 将几行代码缩进至少四个空格，例如： // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下： // Some comments line 1 of code line 2 of code line 3 of code 输出的 HTML 看起来像这样： \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2021-12-18","objectID":"/posts/markdown/:9:2","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块。 ```markdown Sample text here... ``` 输出的 HTML 看起来像这样： \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2021-12-18","objectID":"/posts/markdown/:9:3","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"语法高亮 Chroma 语言高亮列表 - Hugo Chroma 支持语言 - Chroma [GFM]^(GitHub Flavored Markdown) 也支持语法高亮。 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名， ```js, 语法高亮显示将自动应用于渲染的 HTML 中。 例如，在以下 JavaScript 代码中应用语法高亮： ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下： grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意 Hugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息， 包括语法高亮的 shortcode。 ","date":"2021-12-18","objectID":"/posts/markdown/:9:4","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线，并在标题下添加一行破折号 （也由竖线分隔） 来创建表格。注意，竖线不需要垂直对齐。 | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下： Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样： \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐 在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐。 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中。 | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下： Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2021-12-18","objectID":"/posts/markdown/:10:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"11 链接 ","date":"2021-12-18","objectID":"/posts/markdown/:11:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 （将鼠标悬停在链接上，没有提示）: https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样： \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2021-12-18","objectID":"/posts/markdown/:11:1","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 （将鼠标悬停在链接上，会有一行提示）: Upstage 输出的 HTML 看起来像这样： \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2021-12-18","objectID":"/posts/markdown/:11:2","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点。例如，每个章节： ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分： ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意 定位标记的位置几乎是任意的。因为它们并不引人注目，所以它们通常被放在同一行了。 ","date":"2021-12-18","objectID":"/posts/markdown/:11:3","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"12 脚注 脚注使你可以添加注释和参考，而不会使文档正文混乱。 当你创建脚注时，会在添加脚注引用的位置出现带有链接的上标编号。 读者可以单击链接以跳至页面底部的脚注内容。 要创建脚注引用，请在方括号中添加插入符号和标识符 ([^1])。 标识符可以是数字或单词，但不能包含空格或制表符。 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中，脚注按顺序编号。 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注)。 你不一定要在文档末尾添加脚注。可以将它们放在除列表，引用和表格等元素之外的任何位置。 这是一个数字脚注 [^1] 这是一个带标签的脚注 [^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注 1 这是一个带标签的脚注 2 ","date":"2021-12-18","objectID":"/posts/markdown/:12:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":["Markdown语法"],"content":"13 图片 图片的语法与链接相似，但包含一个在前面的感叹号。 ![Minion](https://octodex.github.com/images/minion.png) 或者： ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") Alt text 像链接一样，图片也具有脚注样式的语法： ![Alt text][id] Alt text 稍后在文档中提供参考内容，用来定义 URL 的位置： [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧 FixIt 主题提供了一个包含更多功能的 图片的 shortcode。 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2021-12-18","objectID":"/posts/markdown/:13:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/markdown/"},{"categories":null,"content":"Node Methods ","date":"0001-01-01","objectID":"/juc/aqs/:0:0","tags":null,"title":"","uri":"/juc/aqs/"},{"categories":null,"content":"需要重写的方法 ","date":"0001-01-01","objectID":"/juc/aqs/:1:0","tags":null,"title":"","uri":"/juc/aqs/"},{"categories":null,"content":"tryAcquire ","date":"0001-01-01","objectID":"/juc/aqs/:1:1","tags":null,"title":"","uri":"/juc/aqs/"},{"categories":null,"content":"tryRelease ","date":"0001-01-01","objectID":"/juc/aqs/:1:2","tags":null,"title":"","uri":"/juc/aqs/"},{"categories":null,"content":"tryAcquireShared ","date":"0001-01-01","objectID":"/juc/aqs/:1:3","tags":null,"title":"","uri":"/juc/aqs/"},{"categories":null,"content":"tryReleaseShared ","date":"0001-01-01","objectID":"/juc/aqs/:1:4","tags":null,"title":"","uri":"/juc/aqs/"},{"categories":null,"content":"isHeldExclusively ","date":"0001-01-01","objectID":"/juc/aqs/:1:5","tags":null,"title":"","uri":"/juc/aqs/"},{"categories":null,"content":"不需要重写的方法 ","date":"0001-01-01","objectID":"/juc/aqs/:2:0","tags":null,"title":"","uri":"/juc/aqs/"},{"categories":null,"content":"acquire 获取独占锁 用CountDownLatch来作为切入点 ","date":"0001-01-01","objectID":"/juc/aqs/:2:1","tags":null,"title":"","uri":"/juc/aqs/"},{"categories":null,"content":"CountDownLatch.await() ","date":"0001-01-01","objectID":"/juc/aqs/:3:0","tags":null,"title":"","uri":"/juc/aqs/"},{"categories":null,"content":"CountDownLatch.countDown() ","date":"0001-01-01","objectID":"/juc/aqs/:4:0","tags":null,"title":"","uri":"/juc/aqs/"},{"categories":null,"content":"offline cache page of FixIt theme","date":"0001-01-01","objectID":"/offline/","tags":null,"title":"","uri":"/offline/"}]